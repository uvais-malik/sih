import React, { createContext, useState, useEffect, useContext, ReactNode, useCallback } from 'react';

type Theme = 'light' | 'dark';
type Language = 'hi' | 'en';

interface AppContextType {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  language: Language;
  setLanguage: (language: Language) => void;
  t: (key: string) => string;
}

const translations: Record<string, Record<Language, string>> = {
  // --- Dashboard ---
  greeting: { hi: "ЁЯЩП рдирдорд╕реНрдХрд╛рд░, рд░рд╛рдЬреВ рдЬреА!", en: "ЁЯЩП Hello, Raju!" },
  greeting_subtitle: { hi: "рдЖрдЬ рдЖрдкрдХреЗ рдЦреЗрдд рдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рджреЗрдЦрддреЗ рд╣реИрдВ", en: "Let's check your farm's health today" },
  location: { hi: "ЁЯУН рдкреБрдгреЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░", en: "ЁЯУН Pune, Maharashtra" },
  weather_title: { hi: "рдЖрдЬ рдХрд╛ рдореМрд╕рдо", en: "Today's Weather" },
  weather_desc: { hi: "рд╕рд╛рдл рдЖрд╕рдорд╛рди", en: "Clear Sky" },
  temp_label: { hi: "рддрд╛рдкрдорд╛рди", en: "Temperature" },
  humidity_label: { hi: "рдирдореА", en: "Humidity" },
  wind_label: { hi: "рд╣рд╡рд╛", en: "Wind" },
  ai_suggestion_title: { hi: "AI рд╕реБрдЭрд╛рд╡", en: "AI Suggestion" },
  ai_suggestion_text: { hi: "ЁЯТз рдЖрдЬ рд╢рд╛рдо 6-7 рдмрдЬреЗ рдХреЗ рдмреАрдЪ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░рдирд╛ рдЙрдкрдпреБрдХреНрдд рд░рд╣реЗрдЧрд╛ред", en: "ЁЯТз It is suitable to irrigate today between 6-7 PM." },
  disease_detection: { hi: "рд░реЛрдЧ рдкрд╣рдЪрд╛рди", en: "Disease Detection" },
  disease_detection_subtitle: { hi: "рдлреЛрдЯреЛ рдЦреАрдВрдЪрдХрд░ рдЬрд╛рдВрдЪреЗрдВ", en: "Check by taking a photo" },
  voice_assistant: { hi: "рдЖрд╡рд╛рдЬрд╝ рдореЗрдВ рдкреВрдЫреЗрдВ", en: "Ask with Voice" },
  voice_assistant_subtitle: { hi: "рдмреЛрд▓рдХрд░ рд╕рд▓рд╛рд╣ рд▓реЗрдВ", en: "Get advice by speaking" },
  market_prices: { hi: "рдмрд╛рдЬрд╝рд╛рд░ рднрд╛рд╡", en: "Market Prices" },
  market_prices_subtitle: { hi: "рддрд╛рдЬрд╝рд╛ рджрд░реЗрдВ рджреЗрдЦреЗрдВ", en: "See latest rates" },
  farm_calendar: { hi: "рдЦреЗрддреА рдХреИрд▓реЗрдВрдбрд░", en: "Farm Calendar" },
  farm_calendar_subtitle: { hi: "рдЖрдЬ рдХреЗ рдХрд╛рдо", en: "Today's tasks" },
  current_crop_status: { hi: "рд╡рд░реНрддрдорд╛рди рдлрд╕рд▓ рд╕реНрдерд┐рддрд┐", en: "Current Crop Status" },
  crop_name: { hi: "рдЧреЗрд╣реВрдВ", en: "Wheat" },
  sowing_date: { hi: "рдмреБрдЖрдИ: 15 рдирд╡рдВрдмрд░ 2024", en: "Sown: 15 Nov 2024" },
  healthy_status: { hi: "рд╕реНрд╡рд╕реНрде рд╕реНрдерд┐рддрд┐", en: "Healthy Condition" },
  days_label: { hi: "рджрд┐рди", en: "Day" },
  growth: { hi: "Growth", en: "Growth" },
  health: { hi: "Health", en: "Health" },
  remaining: { hi: "Remaining", en: "Remaining" },
  days_remaining: { hi: "рджрд┐рди", en: "days" },
  next_action: { hi: "рдЕрдЧрд▓рд╛ рдХрд╛рд░реНрдп", en: "Next Action" },
  next_action_desc: { hi: "ЁЯМ▒ рдлрд╕рд▓ рдореЗрдВ рдлреВрд▓ рдЖрдиреЗ рдХрд╛ рд╕рдордпред рдлреЙрд╕реНрдлреЛрд░рд╕ рдпреБрдХреНрдд рдЦрд╛рдж рдбрд╛рд▓реЗрдВред", en: "ЁЯМ▒ Time for flowering. Apply phosphorus rich fertilizer." },
  
  // --- Bottom Nav ---
  dashboard: { hi: "рдбреИрд╢рдмреЛрд░реНрдб", en: "Dashboard" },
  profile: { hi: "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓", en: "Profile" },

  // --- Profile Page ---
  profile_greeting: { hi: "рд░рд╛рдЬреВ рдкрдЯреЗрд▓", en: "Raju Patel" },
  profile_location: { hi: "ЁЯУН рдкреБрдгреЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░", en: "ЁЯУН Pune, Maharashtra" },
  land_stat: { hi: "Land", en: "Land" },
  crops_stat: { hi: "Crops", en: "Crops" },
  experience_stat: { hi: "Experience", en: "Experience" },
  personal_info: { hi: "рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА", en: "Personal Information" },
  name_label: { hi: "Name", en: "Name" },
  phone_label: { hi: "Phone", en: "Phone" },
  language_label: { hi: "Language", en: "Language" },
  location_label: { hi: "Location", en: "Location" },
  farm_info: { hi: "рдЦреЗрддреА рдХреА рдЬрд╛рдирдХрд╛рд░реА", en: "Farm Information" },
  land_size_label: { hi: "Land Size", en: "Land Size" },
  primary_crops_label: { hi: "Primary Crops", en: "Primary Crops" },
  soil_type_label: { hi: "Soil Type", en: "Soil Type" },
  irrigation_label: { hi: "Irrigation", en: "Irrigation" },
  settings: { hi: "рд╕реЗрдЯрд┐рдВрдЧреНрд╕", en: "Settings" },
  language_toggle: { hi: "рдЕрдВрдЧреНрд░реЗрдЬреА рднрд╛рд╖рд╛", en: "English Language" },
  dark_mode_toggle: { hi: "рдбрд╛рд░реНрдХ рдореЛрдб", en: "Dark Mode" },
  notifications_toggle: { hi: "рд╕реВрдЪрдирд╛рдПрдВ", en: "Notifications" },
  voice_assistance_toggle: { hi: "рдЖрд╡рд╛рдЬ рд╕рд╣рд╛рдпрддрд╛", en: "Voice Assistance" },
  edit_profile: { hi: "тЬПя╕П рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ", en: "тЬПя╕П Edit Profile" },
  user_name: { hi: "рд░рд╛рдЬреВ рдкрдЯреЗрд▓", en: "Raju Patel" },
  user_phone: { hi: "+91-9876543210", en: "+91-9876543210" },
  user_language: { hi: "рд╣рд┐рдВрджреА", en: "English" },
  user_location: { hi: "рдкреБрдгреЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░", en: "Pune, Maharashtra" },
  user_land_size: { hi: "5 рдПрдХрдбрд╝", en: "5 Acres" },
  user_primary_crops: { hi: "рдЧрдиреНрдирд╛, рдкреНрдпрд╛рдЬ", en: "Sugarcane, Onion" },
  user_soil_type: { hi: "рдХрд╛рд▓реА рдХрдкрд╛рд╕ рдорд┐рдЯреНрдЯреА", en: "Black Cotton Soil" },
  user_irrigation: { hi: "рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ", en: "Drip Irrigation" },
  user_experience_value: { hi: "2 рд╕рд╛рд▓", en: "2 Years" },
  user_land_value: { hi: "5 рдПрдХрдбрд╝", en: "5 Acres" },
  user_crops_value: { hi: "3 рдлрд╕рд▓реЗрдВ", en: "3 Crops" },
  
  // --- Disease Detection ---
  disease_detection_title: { hi: "ЁЯФм AI рд░реЛрдЧ рдкрд╣рдЪрд╛рди", en: "ЁЯФм AI Disease Detection" },
  disease_detection_page_subtitle: { hi: "рдкрддреНрддрд┐рдпреЛрдВ рдХреА рдлреЛрдЯреЛ рд╕реЗ рддреБрд░рдВрдд рдЬрд╛рдВрдЪ", en: "Instant check from leaf photos" },
  
  // CameraView
  take_crop_photo: { hi: "рдлрд╕рд▓ рдХреА рдлреЛрдЯреЛ рдЦреАрдВрдЪреЗрдВ", en: "Take a Crop Photo" },
  take_crop_photo_desc: { hi: "рдкрддреНрддреА рдХреА рд╕рд╛рдл рддрд╕реНрд╡реАрд░ рд▓реЗрдВ рддрд╛рдХрд┐ AI рд╕рд╣реА рдЬрд╛рдВрдЪ рдХрд░ рд╕рдХреЗред", en: "Take a clear picture of the leaf for accurate AI analysis." },
  open_camera: { hi: "ЁЯУ╕ рдХреИрдорд░рд╛ рдЦреЛрд▓реЗрдВ", en: "ЁЯУ╕ Open Camera" },
  choose_from_gallery: { hi: "ЁЯУБ рдЧреИрд▓рд░реА рд╕реЗ рдЪреБрдиреЗрдВ", en: "ЁЯУБ Choose from Gallery" },
  analyzing: { hi: "рдЬрд╛рдВрдЪ рд╣реЛ рд░рд╣реА рд╣реИ...", en: "Analyzing..." },
  analyze_with_ai: { hi: "ЁЯдЦ AI рд╕реЗ рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ", en: "ЁЯдЦ Analyze with AI" },
  take_another_photo: { hi: "ЁЯФД рджреВрд╕рд░реА рдлреЛрдЯреЛ рд▓реЗрдВ", en: "ЁЯФД Take Another Photo" },

  // AnalysisResults
  confidence_score: { hi: "рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрдХреЛрд░", en: "Confidence Score" },
  symptoms: { hi: "рд▓рдХреНрд╖рдг", en: "Symptoms" },
  treatment: { hi: "рдЙрдкрдЪрд╛рд░", en: "Treatment" },
  prevention: { hi: "рдмрдЪрд╛рд╡ рдХреЗ рдЙрдкрд╛рдп", en: "Prevention Measures" },
  save_to_history: { hi: "ЁЯТ╛ рдЗрддрд┐рд╣рд╛рд╕ рдореЗрдВ рд╕рд╣реЗрдЬреЗрдВ", en: "ЁЯТ╛ Save to History" },
  view_history: { hi: "ЁЯУЬ рдЗрддрд┐рд╣рд╛рд╕ рджреЗрдЦреЗрдВ", en: "ЁЯУЬ View History" },
  contact_expert: { hi: "ЁЯУЮ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ", en: "ЁЯУЮ Contact Expert" },

  // AnalysisHistory
  analysis_history: { hi: "ЁЯУЬ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЗрддрд┐рд╣рд╛рд╕", en: "ЁЯУЬ Analysis History" },
  no_history_found: { hi: "рдХреЛрдИ рд╕рд╣реЗрдЬрд╛ рдЧрдпрд╛ рдЗрддрд┐рд╣рд╛рд╕ рдирд╣реАрдВ рдорд┐рд▓рд╛ред", en: "No saved history found." },
  no_history_found_desc: { hi: "рдЬрдм рдЖрдк рдХрд┐рд╕реА рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЛ рд╕рд╣реЗрдЬрддреЗ рд╣реИрдВ, рддреЛ рд╡рд╣ рдпрд╣рд╛рдВ рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛ред", en: "When you save an analysis, it will appear here." },
  
  // --- Voice Assistant Modal ---
  ai_response: { hi: "ЁЯдЦ AI рдХрд╛ рдЬрд╡рд╛рдм:", en: "ЁЯдЦ AI's Response:" },
  listening: { hi: "рд╕реБрди рд░рд╣рд╛ рд╣реИ...", en: "Listening..." },
  tap_to_ask: { hi: "рдкреВрдЫрдиреЗ рдХреЗ рд▓рд┐рдП рдЯреИрдк рдХрд░реЗрдВ", en: "Tap to ask" },
};


const AppContext = createContext<AppContextType | undefined>(undefined);

export const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [theme, setThemeState] = useState<Theme>(() => (localStorage.getItem('theme') as Theme) || 'light');
  const [language, setLanguageState] = useState<Language>(() => (localStorage.getItem('language') as Language) || 'hi');

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('light', 'dark');
    root.classList.add(theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  useEffect(() => {
    localStorage.setItem('language', language);
    document.documentElement.lang = language;
  }, [language]);

  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
  };
  
  const setLanguage = (newLanguage: Language) => {
    setLanguageState(newLanguage);
  };

  const t = useCallback((key: string): string => {
    return translations[key]?.[language] || key;
  }, [language]);

  return (
    <AppContext.Provider value={{ theme, setTheme, language, setLanguage, t }}>
      {children}
    </AppContext.Provider>
  );
};

export const useAppContext = (): AppContextType => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
};
